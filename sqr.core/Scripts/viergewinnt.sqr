funq printBoard (board {
	@Qonsole:writeLine(" 1 2 3 4 5 6 7 ");
	@Qonsole:writeLine("---------------");
	*~ r <~ 0;
	*~ c <~ 0;
	while(r < board:length()) {
		@Qonsole:write(' ');
		while(c < board:@r:length()) {
			*~ tempRow <~ board:@r;
			@Qonsole:write(tempRow:c + ' ');
			c <~ c + 1;
		}
		c <~ 0;
		@Qonsole:writeLine('');
		r <~ r + 1;
	}

	@Qonsole:writeLine("---------------");
	@Qonsole:writeLine(" 1 2 3 4 5 6 7 ");
});

fq dropInBoard (board, column, symbol {
	*~ r <~ board:length() - 1;
	*~ c <~ 0;
	while(r >= 0) {
		*~ tempRow <~ board:@r;
		if(tempRow:column == ' ') {
			tempRow:column <~ symbol;
			r <~ 0;
			return board;
		}
		r <~ r - 1;
	}
	return board;
});

fq checkIfWon (board, symbol, playerId {
	*~ r <~ 0;
	*~ c <~ 0;
	*~ count <~ 0;
	*~ rows <~ board:length();
	if (rows < 1) {
		return -1;
	}
	*~ tempRow <~ board:0;
	*~ columns <~ tempRow:length();
	# horizontal
	while(r < rows) {
		tempRow <~ board:@r;
		while(c < columns) {
			if (count == 4) {
				return playerId;
			}
			if (tempRow:@c == symbol) {				
				count <~ count + 1;
			} else {
				count <~ 0;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r + 1;
	}
	# vertical
	r <~ 0;
	c <~ 0;
	count <~ 0;
	while(c < columns) {
		while(r < rows) {
			tempRow <~ board:@r;
			if (count == 4) {
				return playerId;
			}
			if (tempRow:c == symbol) {				
				count <~ count + 1;
			} else {
				count <~ 0;
			}
			r <~ r + 1;
		}
		r <~ 0;
		c <~ c + 1;
	}
	# diagonal
	r <~ 0;
	c <~ 0;
	count <~ 0;
	while (r < (rows - 3)) {
		while (c < (columns - 3)) {
			count <~ 0;
			*~ indexer <~ 0;
			*~ index <~ 0;
			while (indexer < 4) {
				index <~ r + indexer;
				tempRow <~ board:@index;
				index <~ c + indexer;
				if (tempRow:@index == symbol) {
					count <~ count + 1;
				}
				indexer <~ indexer + 1;
			}
			if (count == 4) {
				return playerId;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r + 1;
	}
	r <~ rows - 1;
	c <~ 0;
	count <~ 0;
	while (r >= 3) {
		while (c < (columns - 3)) {
			count <~ 0;
			*~ indexer <~ 0;
			*~ index <~ 0;
			while (indexer < 4) {
				index <~ r - indexer;
				tempRow <~ board:@index;
				index <~ c + indexer;
				if (tempRow:@index == symbol) {
					count <~ count + 1;
				}
				indexer <~ indexer + 1;
			}
			if (count == 4) {
				return playerId;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r - 1;
	}

	return 0;
});

fq columnInBoardHasSpace (board, column {
	*~ tempRow <~ board:0;
	*~ ret <~ 0;
	if (tempRow:@column == ' ') { ret <~ 1; }
	return ret;
});

*~ player1Symbol <~ 'O';
*~ player2Symbol <~ 'X';
*~ currentPlayerName <~ '';
*~ currentPlayerSymbol <~ player1Symbol;
*~ currentPlayer <~ 1;
*~ currentboard <~ '';

*~ run <~ 1;
while(run > 0) {
	currentboard <~ 
	[
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' ']
	];
	*~ rand <~ new Random();
	*~ startPlayer <~ @Calc:round(rand:range(1, 2));
	currentPlayer <~ startPlayer;

	*~ winner <~ 0;

	@Qonsole:writeLine('--------| 4-Gewinnt |--------');
	@Qonsole:write('Player 1: ');
	*~ player1Name <~ @Qonsole:readLine();
	@Qonsole:write('Player 2: ');
	*~ player2Name <~ @Qonsole:readLine();

	while(winner == 0) {
		if (currentPlayer == 1) {
			currentPlayerName <~ player1Name;
			currentPlayerSymbol <~ player1Symbol;
		} else {
			currentPlayerName <~ player2Name;
			currentPlayerSymbol <~ player2Symbol;
		};
		printBoard(currentboard);		
		@Qonsole:writeLine(currentPlayerName);

		*~ column <~ -1;
		*~ validInput <~ false;
		while(validInput == false) {
			column <~ @Parse:asInt(@Qonsole:readLine());
			validInput <~ true;
			if ((column < 1) || (column > currentboard:length())) {
					validInput <~ false;
			} else {
				if (columnInBoardHasSpace(currentboard, column - 1) == 0) {
					validInput <~ false;
				}
			}
		}

		if (currentPlayer == 1) {		
			dropInBoard(currentboard, column - 1, player1Symbol);
		} else {
			dropInBoard(currentboard, column - 1, player2Symbol);
		}

		winner <~ checkIfWon(currentboard, currentPlayerSymbol, currentPlayer);
		if (winner == 0) {
			if (currentPlayer == 1) { currentPlayer <~ 2; } else { currentPlayer <~ 1; }
		}
	}

	printBoard(currentboard);
	@Qonsole:writeLine("--------Winner--------");
	@Qonsole:write("Congratulations:");
	@Qonsole:writeLine(currentPlayerName);
	@Qonsole:writeLine("----------------------\n\n");
	
	@Qonsole:write('Again? [y/n]: ');
	*~ input <~ @Qonsole:readLine();
	if ((input != 'y') && (input != 'Y')) {
		run <~ 0;
	}
}