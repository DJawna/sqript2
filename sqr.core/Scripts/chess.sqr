module ChessGame;

*~ BLACK <~ 64;
*~ WHITE <~ 128;

*~ PAWN <~ 1; 
*~ BISHOP <~ 2; 
*~ KNIGHT <~ 4; 
*~ ROOK <~ 8; 
*~ QUEEN <~ 16; 
*~ KING <~ 32; 

*~ FILE_TO_X <~ {
	A <~ 0,
	B <~ 1,
	C <~ 2,
	D <~ 3,
	E <~ 4,
	F <~ 5,
	G <~ 6,
	H <~ 7
};

qlass PieceType {
	Number id;
	String name;
	Qollection symbols;
	Qallable isLegalCallback; 
	Number value;

	fq PieceType(name, symbols, value, isLegalCallback {
		this:name <~ name;
		this:symbols <~ symbols;
		this:value <~ value;
		this:isLegalCallback <~ isLegalCallback;
		return this;
	});

	fq isLegal(board, pos, isAttack {
		<: this:isLegalCallback(board, pos, isAttack);
	});
};

qlass Pos {
	Number x;
	Number y;

	fq Pos(x, y {
		this:x <~ x;
		this:y <~ y;
	});

	fq delta(pos { 
		<: new Pos(this:x - pos:x, this:y - pos:y);
	});

	fq dir({
		*~ x <~ 1;
		*~ y <~ 1;
		if (this:x < 0) {
			x <~ -1;
		}
		if (this:y < 0) {
			y <~ -1;
		}
		<: new Pos(x, y);
	});
};

qlass Piece {
	PieceType type;
	Pos pos;
	String owner;
};

export qlass Chess {
	fq definePieceTypes({
		*~ r <~ [];
		r:add(new PieceType('Pawn', [ 'p', '♟' ], 1, ~:(board, pos, isAttack {
			return isAttack;
		})));
		r:add(new PieceType('Bishop', [ 'B', '♟' ], 3, ~:(board, pos, isAttack {
			return isAttack;
		})));
		r:add(new PieceType('Knight', [ 'N', '♟' ], 3, ~:(board, pos, isAttack {
			return isAttack;
		})));
		r:add(new PieceType('Rook', [ 'R', '♟' ], 5, ~:(board, pos, isAttack {
			return isAttack;
		})));
		r:add(new PieceType('Queen', [ 'Q', '♟' ], 9, ~:(board, pos, isAttack {
			return isAttack;
		})));
		r:add(new PieceType('King', [ 'K', '♟' ], -1, ~:(board, pos, isAttack {
			return isAttack;
		})));
		return r;
	});
};

qlass Board {
	Qollection pieces;
	
	fq Board({
		this:pieces <~  [
			[ WHITE | ROOK,		WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | ROOK ],
			[ WHITE | KNIGHT,	WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | KNIGHT ],
			[ WHITE | BISHOP,	WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | BISHOP ],
			[ WHITE | QUEEN,	WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | QUEEN ],
			[ WHITE | KING,		WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | KING ],
			[ WHITE | BISHOP,	WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | BISHOP ],
			[ WHITE | KNIGHT,	WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | KNIGHT ],
			[ WHITE | ROOK,		WHITE | PAWN, null, null, null, null, BLACK | PAWN, BLACK | ROOK ],
		];
	});

	Piece fq get(pos { 
		<: this:pieces:(pos:x):(pos:y); 
	});

	Piece fq collision(from, to {
		*~ delta <~ to:delta(from);
		*~ dir <~ delta:dir();
		*~ h <~ @Calc:abs(delta:x);
		*~ v <~ @Calc:abs(delta:y);
		*~ i <~ 1;
		while (h + v > 0) {
			*~ pos <~ new Pos(from:x + (dir:x * i), from:y + (dir:y * i));
			cout (pos:x + ":" + pos:y);
			*~ p <~ this:pieces:(pos:x):(pos:y);
			if (p != null) {
				<: p;
			}
			i <~ i + 1;
			h <~ h - dir:x;
			v <~ v - dir:y;
		}
		return null;
	});

	String fq render({
		*~ r <~ ' x  A  B  C  D  E  F  G  H 
';
		*~ y <~ 1;
		while (y < 9) {
			r <~ r + ' ' + y + ' ';
			*~ x <~ 1;
			while (x < 9) {
				r <~ r + ' ' + this:pieces:(x - 1):(y - 1) + ' ';
				x <~ x + 1;
			}
			y <~ y + 1;
			r <~ r + '
';
		}
		<: r;
	});
};

qlass Game {
	Number currentTurn <~ WHITE;
	Objeqt pieceTypes;
	Board board;
	Qollection pieces;
};

qlass Input {
	Pos from;
	Pos to;

	fq read({ 
		*~ v <~ @Qonsole:readLine();
		*~ fx <~ @Parse:asInt(FILE_TO_X:(v:0));
		*~ fy <~ @Parse:asInt(v:1);
		*~ tx <~ @Parse:asInt(FILE_TO_X:(v:3));
		*~ ty <~ @Parse:asInt(v:4);
		this:from <~ new Pos(fx, fy);
		this:to <~ new Pos(tx, ty);
		<: this;
	});
};


@Chess:definePieceTypes();